{"version":3,"sources":["components/Header/Header.jsx","components/Node/Node.jsx","algorithms/helperFunctions.js","algorithms/dijkstra.js","components/PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/bfs.js","algorithms/dfs.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","className","collapseOnSelect","expand","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","title","onClick","props","visualize","disabled","this","isVisualizing","clearBoard","aria-hidden","Component","Node","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","getUnvisitedNeighbors","node","grid","neighbors","push","length","filter","neighbor","isVisited","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","unvisitedNeighbors","previousNode","algorithmsImplemented","startNode","finishNode","visitedNodesInOrder","nodes","i","j","getAllNodes","closestNode","shift","Infinity","unvisited","isVisted","currentNode","pop","PathfindingVisualizer","chosenAlgo","setState","unvisitNodes","state","nodesInShortestPathOrder","shortestPath","unshift","getNodesInShortestPathOrder","animate","mouseIsPressed","getInitialGrid","newGrid","getNewGridWithWallToggled","setTimeout","document","getElementById","animateShortestPath","removeWalls","previous","isEnd","style","display","boxSizing","textAlign","marginTop","backgroundColor","border","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.404bc5f6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './Header.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        return (\r\n          <Navbar className=\"color-nav\" collapseOnSelect expand=\"lg\" variant=\"dark\">\r\n            <Navbar.Brand href=\"\">Path Finding Visualizer</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link title=\"Dijkstra's shortest path algorithm works on weighted graphs and guarantees the shortest path. This algorithm works similarly to breadth-first search in that it begins at the start node and then works it's way outward in all directions. As it works outwards it checks the edges (u,v,w) to see if u.distance + w is less than v.distance. If so it updates v.distance to hold u.distance + w. It continues this process until no more nodes can be visited, or until the destination node is found.\" \r\n                  onClick={() => this.props.visualize('dijkstra')} disabled={this.props.isVisualizing} href=\"\">Dijkstra</Nav.Link>\r\n                <Nav.Link title=\"Breadth-first search works on unweighted graphs and guarantees the shortest path. This algorithm works by beginning at the starting node and visiting each of its neighbors. It then moves to each neighbor and visits any of its unvisited neighbors. It repeats this process spreading out across the graph until all nodes that can be visited have been, or until we reach the destination node.\" \r\n                  onClick={() => this.props.visualize('bfs')} disabled={this.props.isVisualizing} href=\"\">Breadth First Search</Nav.Link>\r\n                <Nav.Link title=\"Depth-first search works on unweighted graphs and does not guarantee the shortest path. This algorithm visits one node at a time. At each node it visits it selects an unvisited neighbor and moves to that node. It repeats this process until it reaches a node with no unvisited neighbors. It then backtracks to a node which has unvisited neighbors and moves forward down that path. It repeats this until all nodes that can be visited have been, or until it reaches the destination node.\" \r\n                  onClick={() => this.props.visualize('dfs')} disabled={this.props.isVisualizing} href=\"\">Depth First Search</Nav.Link>\r\n              </Nav>\r\n              <Nav>\r\n                <Nav.Link onClick={() => this.props.clearBoard()} disabled={this.props.isVisualizing} href=\"\">Clear Board <i className=\"fa fa-eraser\" aria-hidden=\"true\"></i></Nav.Link>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}","export const getUnvisitedNeighbors = (node, grid) => {\r\n  let neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  neighbors = neighbors.filter((neighbor) => !neighbor.isVisited);\r\n  return neighbors.filter(neighbor => !neighbor.isWall);\r\n};\r\n\r\nexport const getAllNodes = (grid) => {\r\n    const nodes = [];\r\n    for (let i = 0; i < 19; i++) {\r\n      for (let j = 0; j < 49; j++) {\r\n        if (grid[i][j].isVisited || grid[i][j].isWall) continue;\r\n        nodes.push(grid[i][j]);\r\n      }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport const getNodesInShortestPathOrder = (startNode, finishNode) => {\r\n    const shortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null && currentNode !== startNode) {     \r\n     shortestPath.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    shortestPath.unshift(startNode);\r\n    return shortestPath;\r\n}","import { getAllNodes, getUnvisitedNeighbors } from './helperFunctions.js';\n\nexport const dijkstra = (grid, startNode, finishNode) => {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n\n    if (closestNode.isWall) continue;\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nconst sortNodesByDistance = (unvisitedNodes) => {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nconst updateUnvisitedNeighbors = (node, grid) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}","import React, { Component } from \"react\";\r\nimport Header from '../Header/Header';\r\nimport Node from \"../Node/Node\";\r\nimport { getNodesInShortestPathOrder } from \"../../algorithms/helperFunctions\";\r\nimport { dijkstra } from \"../../algorithms/dijkstra\";\r\nimport { bfs } from \"../../algorithms/bfs\";\r\nimport { dfs } from \"../../algorithms/dfs\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nconst algorithmsImplemented = {\r\n  'dijkstra': dijkstra,\r\n  'bfs': bfs,\r\n  'dfs': dfs,\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      isVisualizing: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (this.state.isVisualizing) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed || this.state.isVisualizing) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n\tif (this.state.isVisualizing) return;\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = \"node node-visited node-finish\";\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\r\n        document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = \"node node-visited node-start\";\r\n        document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = \"node node-finish\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\r\n        document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = \"node node-start node-shortest-path\";\r\n        if (i === nodesInShortestPathOrder.length - 1) {\r\n          document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = \"node node-finish node-shortest-path\";\r\n          this.setState({ isVisualizing: false });\r\n        }\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualize = (chosenAlgo) => {\r\n    this.setState({ isVisualizing: true });\r\n    this.unvisitNodes(false);\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = algorithmsImplemented[chosenAlgo](grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(\r\n      startNode,\r\n      finishNode\r\n    );\r\n    this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  unvisitNodes(removeWalls) {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < 19; row++) {\r\n      for (let col = 0; col < 49; col++) {\r\n        let node = grid[row][col];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node \";\r\n        node.isVisited = false;\r\n        node.previous = null;\r\n        node.distance = Infinity;\r\n        if (removeWalls) {\r\n          node.isWall = false;\r\n        } else if (node.isWall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-wall\";\r\n        }\r\n        if (row === START_NODE_ROW && col === START_NODE_COL) {\r\n          document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = \"node node-start\";\r\n          node.isStart = true;\r\n        }\r\n        if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\r\n          document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = \"node node-finish\";\r\n          node.isEnd = true;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  clearBoard = () => {\r\n    if (this.state.isVisualizing) return;\r\n    this.unvisitNodes(true);\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <>\r\n        <Header visualize={this.visualize} isVisualizing={this.state.isVisualizing} clearBoard={this.clearBoard}/>\r\n        <div className=\"main\" style={{ display: 'block', boxSizing: 'border-box', textAlign: 'center', marginTop: '30px' }}>\r\n          <ul className=\"cellunordered\">\r\n            <li className=\"celllist\">\r\n              <div className=\"cell cell-start\"></div>Starting Node\r\n            </li>\r\n            <li className=\"celllist\">\r\n              <div className=\"cell cell-finish\"></div>Target Node\r\n            </li>\r\n            <li className=\"celllist\">\r\n              <div className=\"cell\" style={{ backgroundColor: 'white', border: '1px solid rgb(175, 216, 248)' }}></div>Unvisited Node\r\n            </li>\r\n            <li className=\"celllist\">\r\n              <div className=\"cell\" style={{ backgroundColor: 'rgba(0, 217, 159, 0.75)' }}></div>\r\n              <div className=\"cell\" style={{ backgroundColor: 'rgba(0, 190, 218, 0.75)' }}></div>Visited Nodes\r\n            </li>\r\n            <li className=\"celllist\">\r\n              <div className=\"cell\" style={{ backgroundColor: 'rgb(12, 53, 71)' }}></div>Wall Node\r\n            </li>\r\n            <li className=\"celllist\">\r\n              <div className=\"cell\" style={{ backgroundColor: 'rgb(255, 254, 106)' }}></div>Shortest-Path Node\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 19; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 49; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import { getUnvisitedNeighbors } from \"./helperFunctions.js\";\r\n\r\nexport const bfs = (grid, startNode, finishNode) => {\r\n  const unvisited = [];\r\n  const visitedNodesInOrder = [];\r\n  startNode.isVisted = true;\r\n  startNode.previousNode = null;\r\n  unvisited.push(startNode);\r\n  visitedNodesInOrder.push(startNode);\r\n  while (unvisited.length !== 0) {\r\n    let currentNode = unvisited.shift();\r\n    if (currentNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    let neighbors = getUnvisitedNeighbors(currentNode, grid);\r\n    for (const neighbor of neighbors) {\r\n      neighbor.isVisited = true;\r\n      neighbor.previousNode = currentNode;\r\n      unvisited.push(neighbor);\r\n      visitedNodesInOrder.push(neighbor);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}","import { getUnvisitedNeighbors } from \"./helperFunctions.js\";\r\n\r\nexport const dfs = (grid, startNode, finishNode) => {\r\n  const unvisited = [];\r\n  const visitedNodesInOrder = [];\r\n  startNode.isVisted = true;\r\n  startNode.previousNode = null;\r\n  unvisited.push(startNode);\r\n  visitedNodesInOrder.push(startNode);\r\n  while (unvisited.length !== 0) {\r\n    let currentNode = unvisited.pop();\r\n    if (currentNode === finishNode) return visitedNodesInOrder;\r\n    currentNode.isVisited = true;\r\n    visitedNodesInOrder.push(currentNode);\r\n    let neighbors = getUnvisitedNeighbors(currentNode, grid);\r\n\r\n    for (const neighbor of neighbors) {\r\n      neighbor.previousNode = currentNode;\r\n      unvisited.push(neighbor);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './components/PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}